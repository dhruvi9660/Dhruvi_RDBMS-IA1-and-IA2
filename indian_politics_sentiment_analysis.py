# -*- coding: utf-8 -*-
"""indian_politics_sentiment_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xG1BuE-2TbfmL1B4sEOOuRPDmESk1uwY
"""

import nltk
import pandas as pd
import numpy as np
from nltk.tokenize import sent_tokenize, word_tokenize
import matplotlib

file="finalpol_india.csv"
df= pd.read_csv(file)
df.head(15)

df.shape

from nltk.corpus import stopwords
nltk.download('stopwords')
import re
def noise_removal(sentence):
    for i in range(len(sentence)):
        sentence[i] = sentence[i].lower()
        sentence[i] = re.sub(r'\W',' ',sentence[i]) #removes characters
        sentence[i] = re.sub(r'\d',' ',sentence[i]) #removes digits
        sentence[i] = re.sub(r'\s+',' ',sentence[i]) #removes spaces
        words = nltk.word_tokenize(sentence[i])
        new = []
        for word in words:
            if word not in stopwords.words('english'):
                new.append(word)
        sentence[i] = ' '.join(new)
    return sentence

nltk.download('punkt')

df['content'] = noise_removal(df['content'])

#stemming
from nltk.stem import PorterStemmer

stemmer = PorterStemmer()
for i in range(len(df['content'])):
    words = word_tokenize(df['content'][i])
    words = [stemmer.stem(word) for word in words]
    df['content'][i] = ' '.join(words)
df.head(15)

#sentiment analysis
nltk.download("vader_lexicon")
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sid = SentimentIntensityAnalyzer()
for sent in df['content']:
   print(sent)
   se=sid.polarity_scores(sent)
   print(se)
   print("\n")

df['scores'] = df['content'].apply(lambda Description: sid.polarity_scores(Description))
df.head()

df['compound'] = df['scores'].apply(lambda score_dict: score_dict['compound'])
df['sentiment_type']=''
df.loc[df.compound>0,'sentiment_type']='POSITIVE'
df.loc[df.compound==0,'sentiment_type']='NEUTRAL'
df.loc[df.compound<0,'sentiment_type']='NEGATIVE'
df.head()

df.sentiment_type.value_counts().plot(kind='bar',title="sentiment analysis")

from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt



for i in range(len(df['content'])):
  if df['sentiment_type'][i]=='POSITIVE':
    positive_text=''.join(df.content[i])
  elif df['sentiment_type'][i]=='NEGATIVE':
    negative_text=''.join(df.content[i])

wordcloud= WordCloud(width = 800, height = 800,background_color ='white',min_font_size = 10).generate(positive_text)

plt.figure(figsize = (8, 8), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)
print("*******For positive tweets:-*********\n") 
plt.show()

print("\n")

wordcloud1= WordCloud(width = 800, height = 800,background_color ='white',min_font_size = 10).generate(negative_text)
plt.figure(figsize = (8, 8), facecolor = None)
plt.imshow(wordcloud1)
plt.axis("off")
plt.tight_layout(pad = 0)
print("*******For negative tweets:-********\n")  
plt.show()